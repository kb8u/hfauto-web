#!/usr/bin/env perl

use strict;
use warnings;
use AnyEvent::Strict;
use AnyEvent::Socket;
use AnyEvent::Handle::UDP;
use AnyEvent::HTTPD;
use AnyEvent::WebSocket::Server;
 
use XML::Simple ':strict';
use JSON::XS;
use Data::Dumper;
 
my ($socket,$data);
my $datagram;
my $datagram_count=0;

my $udp_ready = AnyEvent->condvar;
my $info;
 
my $hfauto_rx = AnyEvent::Handle::UDP->new(
    bind => ['10.34.34.34', 15080],
    on_recv => sub {
        my ($datagram, $ae_handle, $sock_addr) = @_;
        my ($service, $host) = AnyEvent::Socket::unpack_sockaddr($sock_addr);
        $datagram_count++;
        $info = "packet number $datagram_count, ". length($datagram).
              " bytes from ". format_address($host)."\n".
              $datagram . "\n\n";

        $info = encode_json(XMLin(
                  $datagram, KeyAttr => 'HFAUTO', ForceArray => 0));
    });

my $httpd = AnyEvent::HTTPD->new (port => 8080);

$httpd->reg_cb (
   '/' => sub {
                 my ($httpd, $req) = @_;
                 my $html = <<"EOHTML";
<html><body><h1>hf-auto packet</h1>
$info
</body></html>
EOHTML
                 $req->respond ({ content => ['text/html', $html ] });
          },
    '/rawdata' => sub {
                 my ($httpd, $req) = @_;
                 my $html = <<"EOHTML";
<!DOCTYPE html>
  <meta charset="utf-8" />
  <title>WebSocket Test</title>
  <script language="javascript" type="text/javascript">

  var wsUri = "ws://10.34.34.34:8081/";
  var output;

  function init()
  {
    output = document.getElementById("output");
    testWebSocket();
  }

  function testWebSocket()
  {
    websocket = new WebSocket(wsUri);
    websocket.onopen = function(evt) { onOpen(evt) };
    websocket.onclose = function(evt) { onClose(evt) };
    websocket.onmessage = function(evt) { onMessage(evt) };
    websocket.onerror = function(evt) { onError(evt) };
  }

  function onOpen(evt)
  {
    writeToScreen("CONNECTED");
    doSend("WebSocket rocks");
  }

  function onClose(evt)
  {
    writeToScreen("DISCONNECTED");
  }

  function onMessage(evt)
  {
    writeToScreen('<span style="color: blue;">RESPONSE: ' + evt.data+'</span>');
    websocket.close();
  }

  function onError(evt)
  {
    writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
  }

  function doSend(message)
  {
    writeToScreen("SENT: " + message);
    websocket.send(message);
  }

  function writeToScreen(message)
  {
    var pre = document.createElement("p");
    pre.style.wordWrap = "break-word";
    pre.innerHTML = message;
    output.appendChild(pre);
  }

  window.addEventListener("load", init, false);

  </script>

  <h2>WebSocket Test</h2>

  <div id="output"></div>
EOHTML
                 $req->respond ({ content => ['text/html', $html ] });
          },
);




$udp_ready->recv;
$httpd->run;
